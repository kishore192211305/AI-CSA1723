def dfs(graph, start, visited=None):
    if visited is None:
        visited = set()                 # Set to keep track of visited nodes
    visited.add(start)                 # Mark the current node as visited
    print(start, end=' ')              # Process the current node (in this example, we print it)

    for neighbor in graph[start]:      # Visit all neighbors of the current node
        if neighbor not in visited:
            dfs(graph, neighbor, visited)  # Recursively call DFS for unvisited neighbors

# Example graph represented as an adjacency list
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}

# Starting node for DFS traversal
start_node = 'A'

print("DFS Traversal:")
dfs(graph, start_node)
