from collections import deque

def bfs(graph, start):
    visited = set()                 # Set to keep track of visited nodes
    queue = deque([start])         # Queue for BFS traversal
    visited.add(start)             # Mark the start node as visited

    while queue:
        node = queue.popleft()     # Dequeue a node from the queue
        print(node, end=' ')       # Process the node (in this example, we print it)

        for neighbor in graph[node]:  # Visit all neighbors of the current node
            if neighbor not in visited:
                visited.add(neighbor)  # Mark neighbor as visited
                queue.append(neighbor)  # Enqueue neighbor for further exploration

# Example graph represented as an adjacency list
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}

# Starting node for BFS traversal
start_node = 'A'

print("BFS Traversal:")
bfs(graph, start_node)
