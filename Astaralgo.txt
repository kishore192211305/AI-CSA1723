import heapq

class Node:
    def __init__(self, state, parent=None, g=0, h=0):
        self.state = state
        self.parent = parent
        self.g = g  # Cost from the start node to this node
        self.h = h  # Heuristic estimate from this node to the goal node

    def __lt__(self, other):
        return (self.g + self.h) < (other.g + other.h)

def astar(start_state, goal_state, successors, heuristic):
    open_list = []
    closed_set = set()

    start_node = Node(start_state, g=0, h=heuristic(start_state, goal_state))
    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)

        if current_node.state == goal_state:
            path = []
            while current_node:
                path.append(current_node.state)
                current_node = current_node.parent
            return path[::-1]

        closed_set.add(current_node.state)

        for successor, cost in successors(current_node.state):
            if successor in closed_set:
                continue

            g = current_node.g + cost
            h = heuristic(successor, goal_state)
            child_node = Node(successor, parent=current_node, g=g, h=h)

            heapq.heappush(open_list, child_node)

    return None

# Example successors function for a graph represented as an adjacency list
def successors(state):
    return [(neighbor, cost) for neighbor, cost in graph[state]]

# Example heuristic function (misplaced tiles)
def misplaced_tiles(state, goal_state):
    count = 0
    for i in range(len(state)):
        if state[i] != goal_state[i]:
            count += 1
    return count

# Example graph represented as an adjacency list
graph = {
    'A': [('B', 2), ('C', 3)],
    'B': [('C', 1), ('D', 5)],
    'C': [('D', 3)],
    'D': []
}

start_state = 'A'
goal_state = 'D'

path = astar(start_state, goal_state, successors, misplaced_tiles)
print("Shortest path:", path)
